df_sum <- df_sum %>% mutate(methods = method, epitope_spe = epi, cluster_tot=cluster_total)
nb_spe_cluster_spe <- rbind(nb_spe_cluster_spe, df_sum)
}
nb_spe_cluster_spe_method[[method]] <- nb_spe_cluster_spe
}
for(method in list_method){
nb_spe_cluster_spe_method[[method]]$epitope_spe <- factor(nb_spe_cluster_spe_method[[method]]$epitope_spe, level = c("GILGFVFTL", "NLVPMVATV", "GLCTLVAML", "FLCMKALLL", "NYNYLYRLF", "LLFGYPVYV"))
df_annotation <- data.frame(epitope_spe = c("GILGFVFTL", "NLVPMVATV", "GLCTLVAML", "FLCMKALLL", "NYNYLYRLF", "LLFGYPVYV"),
tot_cluster= c(nb_spe_cluster_spe_method[[method]]$cluster_tot[nb_spe_cluster_spe_method[[method]]$epitope_spe=="GILGFVFTL"][1],
nb_spe_cluster_spe_method[[method]]$cluster_tot[nb_spe_cluster_spe_method[[method]]$epitope_spe=="NLVPMVATV"][1],
nb_spe_cluster_spe_method[[method]]$cluster_tot[nb_spe_cluster_spe_method[[method]]$epitope_spe=="GLCTLVAML"][1],
nb_spe_cluster_spe_method[[method]]$cluster_tot[nb_spe_cluster_spe_method[[method]]$epitope_spe=="FLCMKALLL"][1],
nb_spe_cluster_spe_method[[method]]$cluster_tot[nb_spe_cluster_spe_method[[method]]$epitope_spe=="NYNYLYRLF"][1],
nb_spe_cluster_spe_method[[method]]$cluster_tot[nb_spe_cluster_spe_method[[method]]$epitope_spe=="LLFGYPVYV"][1]
))
df_annotation$epitope_spe <- factor(df_annotation$epitope_spe, level = c("GILGFVFTL", "NLVPMVATV", "GLCTLVAML", "FLCMKALLL", "NYNYLYRLF", "LLFGYPVYV"))
#pdf(paste0(directory, "Plot/alpha_beta_bis/count_spe_cluster_spe_", method,".pdf"), width = 10, height = 6)
print(ggplot(data = nb_spe_cluster_spe_method[[method]], aes(x= nb_spe_cluster, y = perc_cluster, fill = epitope_spe))+
geom_bar(stat="identity")+
theme_bw()+
scale_fill_manual(values =c("darkgoldenrod1", "brown2", "pink", "cyan2", "darkorange", "darkolivegreen4"))+
ylab("Percentage of clusters")+
xlab("Number of specificities")+
ggtitle(method)+
ylim(0,100)+
facet_wrap(~epitope_spe)+
geom_text(data   = df_annotation, mapping = aes(x = 1, y = 100, label = tot_cluster),hjust   = -0.1,vjust   = -1)+
theme(strip.background =element_rect(fill="grey"),legend.position="none"))#6x12
#dev.off()
}
#plot by epitopes instead of methods
data <- bind_rows(nb_spe_cluster_spe_method)
data_epitope <- split(data, data$epitope_spe)
list_color_epitope <- c("darkgoldenrod1", "brown2", "pink", "cyan2", "darkorange", "darkolivegreen4")
n <- 1
for(epi in list_epitope){
data_epitope[[epi]]$methods <- factor(data_epitope[[epi]]$methods, level = c("Hamming_Distance", "Levenshtein_Distance", "TCRMatch", "iSMART", "GIANA","clusTCR", "GLIPH2", "DeepTCR", "TCRdist3"))
#pdf(paste0(directory, "Plot/alpha_beta_bis/count_spe_cluster_spe_", epi,".pdf"), width = 10, height = 6)
print(ggplot(data = data_epitope[[epi]], aes(x= nb_spe_cluster, y = perc_cluster, fill = epitope_spe))+
geom_bar(stat="identity")+
theme_bw()+
ylab("Percentage of clusters")+
xlab("Number of specificities")+
scale_fill_manual(values = list_color_epitope [[n]])+
ggtitle(epi)+
ylim(0,100)+
facet_wrap(~methods)+
theme(strip.background =element_rect(fill="white", colour = "black"),
strip.text.x = element_text(size = 12, color = "black", face = "bold"),
legend.position="none",
plot.title = element_text(hjust = 0.5, face = "bold")))
#dev.off()
n <- n+1
}
epi <- "GILGFVFTL"
list_plot <- list()
n <- 1
for(method in list_method){
df <- data_epitope[[epi]] %>% filter(methods == method)
list_plot[[method]] <- ggplot(data = df, aes(x= nb_spe_cluster, y = perc_cluster, fill = epitope_spe))+
geom_bar(stat="identity")+
theme_bw()+
ylab("Percentage of clusters")+
xlab("Number of specificities")+
scale_fill_manual(values = list_color_epitope[[n]])+
ggtitle(method)+
ylim(0,100)+
theme(strip.background =element_rect(fill="grey"),legend.position="none",
plot.title = element_text(hjust = 0.5, face = "bold"))
}
do.call("grid.arrange", c(list_plot, ncol = 3))
#refine the previous analysis by selecting one spe for multispe CDR3
nb_spe_cluster_spe_method <-list()
for(method in list_methods){
print(method)
nb_spe_cluster_spe <- list()
for(epi in list_epitope){
print(epi)
if(nrow(at_least_one_epi_clusters_bis[[method]][[epi]] != 0)){
at_least_one_epi_clusters_bis[[method]][[epi]] <- at_least_one_epi_clusters_bis[[method]][[epi]] %>% group_by(clusters) %>% mutate(nb_spe_cluster = n_distinct(Epitope))
cluster_spe <- at_least_one_epi_clusters_bis[[method]][[epi]] %>% select(clusters, Epitope, nb_spe_cluster) %>% unique()
cluster_spe <- cluster_spe %>% select(-Epitope) %>% unique()
df_sum <- cluster_spe %>% group_by(nb_spe_cluster) %>% summarise(count_cluster = n(), .groups = 'drop')
cluster_total <- sum(df_sum$count_cluster)
df_sum <- df_sum %>% mutate(perc_cluster = count_cluster/cluster_total*100)
df_sum <- df_sum %>% mutate(methods = method, epitope_spe = epi, cluster_tot=cluster_total)
nb_spe_cluster_spe[[epi]] <- df_sum
}
}
nb_spe_cluster_spe_method[[method]] <- nb_spe_cluster_spe
}
epi <- "GILGFVFTL"
n <- 1
list_plot <- list()
for(method in list_methods){
df <- nb_spe_cluster_spe_method[[method]][[epi]]
if(exists("df")&&is.data.frame(get("df"))==TRUE){
list_plot[[method]] <- ggplot(data = df, aes(x= nb_spe_cluster, y = perc_cluster, fill = epitope_spe))+
geom_bar(stat="identity")+
theme_bw()+
ylab("Percentage of clusters")+
xlab("Number of specificities")+
scale_fill_manual(values = list_color_epitope[[n]])+
ggtitle(method)+
ylim(0,100)+
theme(strip.background =element_rect(fill="grey"),legend.position="none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
text=element_text(size=15),
axis.text=element_text(size=15))
}
}
do.call("grid.arrange", c(list_plot, ncol = 3))
list_plot <- list()
for(method in list_method){
df <- nb_spe_cluster_spe_method[[method]][[epi]]
if(exists("df")&&is.data.frame(get("df"))==TRUE){
list_plot[[method]] <- ggplot(data = df, aes(x= nb_spe_cluster, y = perc_cluster, fill = epitope_spe))+
geom_bar(stat="identity")+
theme_bw()+
ylab("Percentage of clusters")+
xlab("Number of specificities")+
scale_fill_manual(values = list_color_epitope[[n]])+
ggtitle(method)+
ylim(0,100)+
theme(strip.background =element_rect(fill="grey"),legend.position="none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
text=element_text(size=15),
axis.text=element_text(size=15))
}
}
do.call("grid.arrange", c(list_plot, ncol = 3))
list_method
View(nb_spe_cluster_spe_method)
#refine the previous analysis by selecting one spe for multispe CDR3
nb_spe_cluster_spe_method <-list()
for(method in list_method){
print(method)
nb_spe_cluster_spe <- list()
for(epi in list_epitope){
print(epi)
if(nrow(at_least_one_epi_clusters_bis[[method]][[epi]] != 0)){
at_least_one_epi_clusters_bis[[method]][[epi]] <- at_least_one_epi_clusters_bis[[method]][[epi]] %>% group_by(clusters) %>% mutate(nb_spe_cluster = n_distinct(Epitope))
cluster_spe <- at_least_one_epi_clusters_bis[[method]][[epi]] %>% select(clusters, Epitope, nb_spe_cluster) %>% unique()
cluster_spe <- cluster_spe %>% select(-Epitope) %>% unique()
df_sum <- cluster_spe %>% group_by(nb_spe_cluster) %>% summarise(count_cluster = n(), .groups = 'drop')
cluster_total <- sum(df_sum$count_cluster)
df_sum <- df_sum %>% mutate(perc_cluster = count_cluster/cluster_total*100)
df_sum <- df_sum %>% mutate(methods = method, epitope_spe = epi, cluster_tot=cluster_total)
nb_spe_cluster_spe[[epi]] <- df_sum
}
}
nb_spe_cluster_spe_method[[method]] <- nb_spe_cluster_spe
}
epi <- "GILGFVFTL"
n <- 1
list_plot <- list()
for(method in list_method){
df <- nb_spe_cluster_spe_method[[method]][[epi]]
if(exists("df")&&is.data.frame(get("df"))==TRUE){
list_plot[[method]] <- ggplot(data = df, aes(x= nb_spe_cluster, y = perc_cluster, fill = epitope_spe))+
geom_bar(stat="identity")+
theme_bw()+
ylab("Percentage of clusters")+
xlab("Number of specificities")+
scale_fill_manual(values = list_color_epitope[[n]])+
ggtitle(method)+
ylim(0,100)+
theme(strip.background =element_rect(fill="grey"),legend.position="none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
text=element_text(size=15),
axis.text=element_text(size=15))
}
}
do.call("grid.arrange", c(list_plot, ncol = 3))
pdf("../Plot/NumberSpecificities_GIL.pdf", height = 10, width = 15)
do.call("grid.arrange", c(list_plot, ncol = 3))
dev.off()
View(output_clustcr_spe_bis)
output_clustcr_spe_ter <- output_clustcr_spe_bis %>% group_by(clusters, Epitope) %>% mutate(nb_epi_cluster = n())
output_clustcr_spe_ter <- output_clustcr_spe_ter %>% group_by(clusters)  %>% mutate(epi_majoritaire = Epitope[which.max(nb_epi_cluster)])
View(output_clustcr_spe_ter)
View(output_clustcr_spe)
output_gliph_spe_ter <- output_gliph_spe_bis %>% group_by(clusters, Epitope) %>% mutate(nb_epi_cluster = n())
output_gliph_spe_ter <- output_gliph_spe_ter %>% group_by(clusters)  %>% mutate(epi_majoritaire = Epitope[which.max(nb_epi_cluster)])
output_deeptcr_spe_ter <- output_deeptcr_spe_bis %>% group_by(clusters, Epitope) %>% mutate(nb_epi_cluster = n())
output_deeptcr_spe_ter <- output_deeptcr_spe_ter %>% group_by(clusters)  %>% mutate(epi_majoritaire = Epitope[which.max(nb_epi_cluster)])
output_tcrdist_spe_ter <- output_tcrdist_spe_bis %>% group_by(clusters, Epitope) %>% mutate(nb_epi_cluster = n())
output_tcrdist_spe_ter <- output_tcrdist_spe_ter %>% group_by(clusters)  %>% mutate(epi_majoritaire = Epitope[which.max(nb_epi_cluster)])
list_output_spe_ter <- list("Hamming_Distance" = output_HD_spe, "Levenshtein_Distance"=output_LD_spe, "TCRMatch"= output_tcrm_spe, "GIANA"= output_giana_spe, "iSMART" = output_ismart_spe, "clusTCR" = output_clustcr_spe_ter, "GLIPH2" = output_gliph_spe_ter,"DeepTCR" = output_deeptcr_spe_ter, "TCRdist" = output_tcrdist_spe_ter)
major_times_epi_clusters <-list()
for(method in list_method){
print(method)
big_df <- data.frame()
epitope_list <- list()
for(epi in list_epitope){
print(epi)
list_output_spe_ter[[method]] <- list_output_spe_ter[[method]] %>% mutate(perc_epi_in_cluster = nb_epi_cluster/size)
test <- list_output_spe_ter[[method]] %>% filter(epi_majoritaire == epi & size >3 & perc_epi_in_cluster >=0.67)#select clusters with epi as major and bigcluster
list_clusters <- unique(test$clusters)#retrieve the list of clusters
cluster_spe <- list_output_spe_ter[[method]] %>% filter(clusters %in% list_clusters)
if(method =="GLIPH2"){cluster_spe  <- cluster_spe %>% filter(` number_unique_cdr3`>3)}
cluster_spe$CDR3b_CDR3a_clusters <- paste(cluster_spe$CDR3b_CDR3a, cluster_spe$clusters, sep = "_")
epitope_list[[epi]] <- cluster_spe %>% mutate(major_xtimes_epi = epi)
}
major_times_epi_clusters[[method]] <- epitope_list
}
list_output_spe_ter <- list("Hamming_Distance" = output_HD_spe, "Levenshtein_Distance"=output_LD_spe, "TCRMatch"= output_tcrm_spe, "GIANA"= output_giana_spe, "iSMART" = output_ismart_spe, "clusTCR" = output_clustcr_spe_ter, "GLIPH2" = output_gliph_spe_ter,"DeepTCR" = output_deeptcr_spe_ter, "TCRdist3" = output_tcrdist_spe_ter)
#1. select clusters spe
major_times_epi_clusters <-list()
for(method in list_method){
print(method)
big_df <- data.frame()
epitope_list <- list()
for(epi in list_epitope){
print(epi)
list_output_spe_ter[[method]] <- list_output_spe_ter[[method]] %>% mutate(perc_epi_in_cluster = nb_epi_cluster/size)
test <- list_output_spe_ter[[method]] %>% filter(epi_majoritaire == epi & size >3 & perc_epi_in_cluster >=0.67)#select clusters with epi as major and bigcluster
list_clusters <- unique(test$clusters)#retrieve the list of clusters
cluster_spe <- list_output_spe_ter[[method]] %>% filter(clusters %in% list_clusters)
if(method =="GLIPH2"){cluster_spe  <- cluster_spe %>% filter(` number_unique_cdr3`>3)}
cluster_spe$CDR3b_CDR3a_clusters <- paste(cluster_spe$CDR3b_CDR3a, cluster_spe$clusters, sep = "_")
epitope_list[[epi]] <- cluster_spe %>% mutate(major_xtimes_epi = epi)
}
major_times_epi_clusters[[method]] <- epitope_list
}
#2. calculation of the sensibility
df_nb_spe <- data.frame(epitope = list_epitope,
nb_CDR3 =c(sum(matrix_alpha_beta_final$GILGFVFTL), sum(matrix_alpha_beta_final$NLVPMVATV), sum(matrix_alpha_beta_final$GLCTLVAML),
sum(matrix_alpha_beta_final$FLCMKALLL), sum(matrix_alpha_beta_final$NYNYLYRLF), sum(matrix_alpha_beta_final$LLFGYPVYV)),
nb_pair =c(sum(matrix_pair_final$GILGFVFTL), sum(matrix_pair_final$NLVPMVATV), sum(matrix_pair_final$GLCTLVAML),
sum(matrix_pair_final$FLCMKALLL), sum(matrix_pair_final$NYNYLYRLF), sum(matrix_pair_final$LLFGYPVYV)))
df_sensibility_all_epitope <- data.frame()
for (epi in list_epitope){
df_sensibility_all <- data.frame()
for(method in list_methods){
if(method %in% c("Hamming_Distance", "Levenshtein_Distance", "TCRMatch","iSMART", "GIANA")){
nb_CDR3 <- n_distinct(major_times_epi_clusters[[method]][[epi]]$CDR3[major_times_epi_clusters[[method]][[epi]]$Epitope==epi])
score <- nb_CDR3/df_nb_spe$nb_CDR3[df_nb_spe$epitope==epi]
}else{
nb_pair <- n_distinct(major_times_epi_clusters[[method]][[epi]]$CDR3b_CDR3a[major_times_epi_clusters[[method]][[epi]]$Epitope==epi])
score <- nb_pair/df_nb_spe$nb_pair[df_nb_spe$epitope==epi]
}
df_sensibility <- data.frame(method = method, epitope = epi, sensibility = score)
df_sensibility_all <- rbind(df_sensibility_all, df_sensibility)
}
df_sensibility_all_epitope <- rbind(df_sensibility_all_epitope, df_sensibility_all)
}
#by epitope
df_sensibility_all_epitope$method <- factor(df_sensibility_all_epitope$method, levels = list_method)
df_sensibility_all_epitope$epitope <- factor(df_sensibility_all_epitope$epitope, levels = list_epitope)
ggplot(df_sensibility_all_epitope, aes(x=method, y=sensibility, color = method)) +
geom_segment(aes(xend=method, yend=0)) +
geom_point(size=4) +
scale_color_manual(values = color_method)+
theme_bw() +
xlab("")+
theme(axis.text.x =  element_blank())+
facet_wrap(~epitope)
df_sensibility_all_epitope <- data.frame()
for (epi in list_epitope){
df_sensibility_all <- data.frame()
for(method in list_method){
if(method %in% c("Hamming_Distance", "Levenshtein_Distance", "TCRMatch","iSMART", "GIANA")){
nb_CDR3 <- n_distinct(major_times_epi_clusters[[method]][[epi]]$CDR3[major_times_epi_clusters[[method]][[epi]]$Epitope==epi])
score <- nb_CDR3/df_nb_spe$nb_CDR3[df_nb_spe$epitope==epi]
}else{
nb_pair <- n_distinct(major_times_epi_clusters[[method]][[epi]]$CDR3b_CDR3a[major_times_epi_clusters[[method]][[epi]]$Epitope==epi])
score <- nb_pair/df_nb_spe$nb_pair[df_nb_spe$epitope==epi]
}
df_sensibility <- data.frame(method = method, epitope = epi, sensibility = score)
df_sensibility_all <- rbind(df_sensibility_all, df_sensibility)
}
df_sensibility_all_epitope <- rbind(df_sensibility_all_epitope, df_sensibility_all)
}
#by epitope
df_sensibility_all_epitope$method <- factor(df_sensibility_all_epitope$method, levels = list_method)
df_sensibility_all_epitope$epitope <- factor(df_sensibility_all_epitope$epitope, levels = list_epitope)
ggplot(df_sensibility_all_epitope, aes(x=method, y=sensibility, color = method)) +
geom_segment(aes(xend=method, yend=0)) +
geom_point(size=4) +
scale_color_manual(values = color_method)+
theme_bw() +
xlab("")+
theme(axis.text.x =  element_blank())+
facet_wrap(~epitope)
ggplot(df_sensibility_all_epitope, aes(x=method, y=sensibility, color = method)) +
geom_segment(aes(xend=method, yend=0)) +
geom_point(size=4) +
scale_color_manual(values = color_method)+
theme_bw() +
xlab("")+
theme(axis.text.x =  element_blank())+
facet_wrap(~epitope)
ggplot(df_sensibility_all_epitope[df_sensibility_all_epitope$epitope == "GILGFVFTL",], aes(x=method, y=sensibility, color = method)) +
geom_segment(aes(xend=method, yend=0)) +
geom_point(size=4) +
scale_color_manual(values = color_method)+
theme_bw() +
xlab("")+
theme(axis.text.x =  element_text(angle =45, hjust = 1),
legend.position="none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
text=element_text(size=15),
axis.text=element_text(size=15))+
ggtitle("GILGFVFTL")
pdf("../Plot/Sensibility_GIL.pdf", height=6, width=7)
ggplot(df_sensibility_all_epitope[df_sensibility_all_epitope$epitope == "GILGFVFTL",], aes(x=method, y=sensibility, color = method)) +
geom_segment(aes(xend=method, yend=0)) +
geom_point(size=4) +
scale_color_manual(values = color_method)+
theme_bw() +
xlab("")+
theme(axis.text.x =  element_text(angle =45, hjust = 1),
legend.position="none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
text=element_text(size=15),
axis.text=element_text(size=15))+
ggtitle("GILGFVFTL")
dev.off()
ggplot(df_sensibility_all_epitope, aes(x=epitope, y=sensibility, color = method)) +
geom_segment(aes(xend=epitope, yend=0)) +
geom_point(size=4) +
scale_color_manual(values = color_method)+
theme_bw() +
#theme(axis.text.x =  element_blank())+
theme(axis.text.x = element_text(angle =45, hjust = 1),
legend.position="none")+ylim(0,1)+
facet_wrap(~method)
#boxplot
library(rstatix)
stat.test <- df_sensibility_all_epitope %>% wilcox_test(sensibility ~ method)
boxplot <- ggplot(data= df_sensibility_all_epitope, aes(x=method, y=sensibility))+
geom_boxplot()+
geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5, aes(fill = epitope))+
theme_bw()+
ylim(0,1)+
theme(axis.text.x = element_text(angle =45, hjust = 1),
legend.position="right",
legend.text=element_text(size=15),
legend.title=element_text(size=15),
text=element_text(size=15),
axis.text=element_text(size=15))+
scale_fill_manual(values= list_color_epitope)+xlab("")#5x5
stat.test <- stat.test %>% add_xy_position(x = "method")
stat.test <- stat.test %>% add_xy_position(x = "method")
stat.test$custom.label <- ifelse(stat.test$p.adj <= 0.05, stat.test$p.adj, "ns")
stat.test$custom.label <- ifelse(stat.test$p.adj <= 0.05, stat.test$p.adj, "ns")
boxplot <- boxplot + stat_pvalue_manual(stat.test, label = "custom.label", tip.length = 0.01)#non significatif
boxplot
boxplot
pdf("../Plot/SensibilityAllEpitopes.pdf", height=6, width =7)
boxplot
dev.off()
pdf("../Plot/SensibilityAllEpitopes.pdf", height=6, width =8)
dev.off()
pdf("../Plot/SensibilityAllEpitopes.pdf", height=6, width =8)
boxplot
dev.off()
#3. Distribution cluster size
epi <- "NLVPMVATV"
plot_list <- list()
for(method in list_method){
if(nrow(major_times_epi_clusters[[method]][[epi]] != 0)){
df <- major_times_epi_clusters[[method]][[epi]] %>% select(clusters, size) %>% unique()
df <- df %>% group_by(size) %>% mutate(count=n()) %>% select(-clusters) %>% unique()
plot <- ggplot(data=df, aes(x=size, y=count)) +
geom_bar(stat="identity",fill = color_method[[method]], color = "black")+
theme_bw()+
ggtitle(method) +
theme(plot.title = element_text(hjust=0.5))+
scale_x_continuous(breaks = seq(0,max(df$size),10))
plot_list[[method]] <- plot
}
}
do.call("grid.arrange", c(plot_list, ncol = 3))
#4. Calculation of the purity of these clusters
df_purity_major_cluster_all <- data.frame()
for (epi in list_epitope){
df_purity_major_cluster <- data.frame()
for(method in list_method){
print(method)
output_spe <- major_times_epi_clusters[[method]][[epi]] %>% group_by(clusters) %>% mutate(nb_majoritaire = max(nb_epi_cluster))
output_spe_sum <- output_spe %>% select(c(clusters, size, nb_majoritaire)) %>% unique()
purity_score <- sum(output_spe_sum$nb_majoritaire)/sum(output_spe_sum$size)
df <- data.frame(epitope = epi, method = method, purity = purity_score)
df_purity_major_cluster <- rbind(df_purity_major_cluster, df)
}
df_purity_major_cluster_all <- rbind(df_purity_major_cluster_all, df_purity_major_cluster)
}
df_purity_major_cluster_all$method <- factor(df_purity_major_cluster_all$method, levels = list_method)
df_purity_major_cluster_all$epitope <- factor(df_purity_major_cluster_all$epitope, levels = list_epitope)
ggplot(df_purity_major_cluster_all, aes(x=method, y=purity, color = method)) +
geom_segment(aes(xend=method, yend=0)) +
geom_point(size=4) +
scale_color_manual(values = color_method)+
theme_bw() +
xlab("")+
theme(axis.text.x =  element_blank())+
facet_wrap(~epitope)
count_polyspe <- function(output, method, matrix_poly, column_1, column_2){
output <- as.data.frame(output)
count_poly_tot <- matrix_poly %>% group_by(polyspe) %>% mutate(count_poly = n())
count_poly_tot <- unique(count_poly_tot$count_poly)[2]
perc_poly <- merge(data.frame(pair=output[,column_1]), matrix_poly, by.x = column_2, by.y = column_2) %>% unique()
perc_poly <- perc_poly %>% group_by(polyspe) %>% mutate(count_poly = n())
perc_poly <- unique(perc_poly$count_poly)[2]
df_poly <- data.frame(method= c(method, method),
count_poly = c(perc_poly, count_poly_tot - perc_poly),
perc_poly= c(perc_poly/count_poly_tot*100, (count_poly_tot - perc_poly)/count_poly_tot*100),
state=c("clustered", "not_clustered"))
}
df_poly_HD <- count_polyspe(output_HD, "Hamming_Distance", matrix_alpha_beta_final, "CDR3", "CDR3")
library(ggplot2)
library(dplyr)
library(gridExtra)
library(ggpubr)
library(viridis)
library(vegan)
library(pheatmap)
library(RColorBrewer)
library(ComplexHeatmap)
list_method <- c("Hamming_Distance", "Levenshtein_Distance", "TCRMatch", "iSMART","GIANA", "clusTCR","GLIPH2", "DeepTCR", "TCRdist3")
color_method <- c("darkorange", "cyan3", "darkorchid4", "grey", "brown1", "darkgoldenrod1", "pink", "chartreuse3", "black")
#process the pooled database
source("../Functions/database_processing.R")
#process output files from methods
source("../Analysis/output_processing.R")
cluster_HD <- output_HD %>% select(clusters, size) %>% mutate(method = "Hamming_Distance") %>% unique()
cluster_LD <- output_LD %>% select(clusters, size) %>% mutate(method = "Levenshtein_Distance") %>% unique()
cluster_tcrm <- output_tcrm %>% select(clusters, size) %>% mutate(method = "TCRMatch") %>% unique()
cluster_ismart <- output_ismart %>% select(clusters, size) %>% mutate(method = "iSMART") %>% unique()
cluster_giana <- output_giana %>% select(clusters, size) %>% mutate(method = "GIANA") %>% unique()
cluster_clustcr <- output_clustcr_pairing %>% select(clusters, size) %>% mutate(method = "clusTCR") %>% unique()
cluster_gliph <- output_gliph %>% select(clusters, size) %>% mutate(method = "GLIPH2") %>% unique()
cluster_deeptcr <- output_deeptcr %>% select(clusters, size) %>% mutate(method = "DeepTCR") %>% unique()
cluster_tcrdist <- output_tcrdist %>% select(clusters, size) %>% mutate(method = "TCRdist3") %>% unique()
cluster_all <- list("Hamming_Distance"= cluster_HD, "Levenshtein_Distance"=cluster_LD, "TCRMatch"=cluster_tcrm, "iSMART"=cluster_ismart, "GIANA"=cluster_giana, "clusTCR"=cluster_clustcr, "GLIPH2"=cluster_gliph, "DeepTCR"=cluster_deeptcr, "TCRdist3"=cluster_tcrdist)
color_method <- list("Hamming_Distance"= "orange", "Levenshtein_Distance"= "cyan3", "TCRMatch"= "darkorchid4", "iSMART"= "grey", "GIANA"= "brown1", "clusTCR"= "darkgoldenrod1", "GLIPH2"= "pink", "DeepTCR"= "chartreuse3", "TCRdist3"= "black")
list_plot <- list()
for(method in names(cluster_all)){
print(method)
list_plot[[method]] <- plot_distribution_size(cluster_all[[method]], color_method[[method]], method)
}
#import purity functions
source("../Functions/purity_functions.R")
source("../Functions/alignment_functions.R")
# 1.sequence similarity between method
list_alignement_HD <- list_alignement_fun("Hamming_Distance", output_HD, chain)
chain <- "b"
# 1.sequence similarity between method
list_alignement_HD <- list_alignement_fun("Hamming_Distance", output_HD, chain)
getwd()
#create network
source("../Functions/network_functions.R")
## Hamming Distance ##
#color by chain type
CDR3_clustered_HD <- data.frame(CDR3=unique(edge_list_HD$input_sequence))
vertices_HD <- merge(CDR3_clustered_HD, liste_sequence_TRA_TRB_chain, by= "CDR3")
#cytoscape
vertices_HD <- merge(vertices_HD, output_HD, by = "CDR3")
#cytoscape
vertices_HD <- merge(vertices_HD, output_HD, by = "CDR3")
graph <- graph_from_data_frame(edge_list_HD, directed = FALSE, vertices = vertices_HD)
## Levenshtein Distance ##
#color by chain type
CDR3_clustered_LD <- data.frame(CDR3=unique(edge_list_LD$input_sequence))
vertices_LD <- merge(CDR3_clustered_LD, liste_sequence_TRA_TRB_chain, by= "CDR3")
#cytoscape
vertices_LD <- merge(vertices_LD, output_LD, by = "CDR3")
#cytoscape
vertices_LD <- merge(vertices_LD, output_LD, by = "CDR3")
graph <- graph_from_data_frame(edge_list_LD, directed = FALSE, vertices = vertices_LD)
CDR3_clustered_tcrmatch <- data.frame(CDR3=unique(edge_list_tcrm$input_sequence))
vertices_tcrmatch <- merge(CDR3_clustered_tcrmatch, liste_sequence_TRA_TRB_chain, by= "CDR3", all.x= T)
#cytoscape
vertices_tcrmatch <- merge(vertices_tcrmatch, output_tcrm, by = "CDR3")
graph <- graph_from_data_frame(edge_list_tcrm, directed = FALSE, vertices = vertices_tcrmatch)
#createNetworkFromIgraph(graph)
## iSMART ##
ismart_list <- split(output_ismart, f = output_ismart$clusters)
edge_list_ismart <- make_edges(ismart_list, "CDR3")#create edges list
edge_list_ismart <- edge_list_ismart %>% filter(value == 1)
colnames(edge_list_ismart) <- c("input_sequence", "match_sequence", "score", "cluster")
edge_list_ismart <- edge_list_ismart %>% select(-cluster)
#color by chain type
CDR3_clustered_ismart <- data.frame(CDR3=unique(output_ismart$CDR3))
vertices_ismart <- merge(CDR3_clustered_ismart, liste_sequence_TRA_TRB_chain, by= "CDR3")
#cytoscape
vertices_ismart <- merge(vertices_ismart , output_ismart, by = "CDR3")
graph <- graph_from_data_frame(edge_list_ismart, directed = FALSE, vertices = vertices_ismart)
#createNetworkFromIgraph(graph)
## GIANA ##
giana_list <- split(output_giana, f = output_giana$clusters)
edge_list_giana <- make_edges(giana_list, "CDR3")
edge_list_giana <- edge_list_giana %>% filter(value == 1)
#color by chain type
CDR3_clustered_giana <- data.frame(CDR3=unique(output_giana$CDR3))
vertices_giana <- merge(CDR3_clustered_giana, liste_sequence_TRA_TRB_chain, by= "CDR3")
#cytoscape
vertices_giana <- merge(vertices_giana, output_giana, by = "CDR3")
graph <- graph_from_data_frame(edge_list_giana, directed = FALSE, vertices = vertices_giana)
#createNetworkFromIgraph(graph)
## clusTCR ##
from_edge_clustcr <- data.frame(CDR3b_CDR3a = unique(edge_list_clustcr$From))
to_edge_clustcr <- data.frame(CDR3b_CDR3a = unique(edge_list_clustcr$To))#combine the two "from" and "to" lists from edge_list of clustcr output
CDR3_clustered_clustcr <- rbind(from_edge_clustcr, to_edge_clustcr) %>% unique() %>% mutate(color_type = "black")
vertices_clustcr <- merge(CDR3_clustered_clustcr, unique_pairing ,by="CDR3b_CDR3a", all.y = T)
vertices_clustcr$color_type[is.na(vertices_clustcr$color_type)] <- "grey"
#cytoscape
vertices_clustcr <- merge(vertices_clustcr, output_clustcr_pairing, by = "CDR3b_CDR3a")
graph <- graph_from_data_frame(edge_list_clustcr, directed = FALSE, vertices = vertices_clustcr)
createNetworkFromIgraph(graph)
